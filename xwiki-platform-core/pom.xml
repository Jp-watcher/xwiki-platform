<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.xwiki.platform</groupId>
    <artifactId>xwiki-platform</artifactId>
    <version>12.9.1-SNAPSHOT</version>
  </parent>
  <artifactId>xwiki-platform-core</artifactId>
  <name>XWiki Platform - Core - Parent POM</name>
  <packaging>pom</packaging>
  <description>XWiki Platform - Core - Parent POM</description>
  <properties>
    <!-- JS/CSS minification is on by default, this property is used in order to able to skip minification when the
         debug profile is active. It can also be used from the command line to skip minification -->
    <xwiki.minification.skip>false</xwiki.minification.skip>
  </properties>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <configuration>
            <archive>
              <!-- Use the manifest file generated by the OSGi Maven Bundle Plugin -->
              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <configuration>
            <systemProperties combine.children="append">
              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->
              <!-- TODO: Remove this property once all functional tests have been moved to use the failsafe plugin -->
              <property>
                <name>screenshotDirectory</name>
                <value>${basedir}/target/screenshots</value>
              </property>
            </systemProperties>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.xwiki.commons</groupId>
              <artifactId>xwiki-commons-tool-test-simple</artifactId>
              <version>${commons.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <configuration>
            <systemProperties combine.children="append">
              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->
              <property>
                <name>screenshotDirectory</name>
                <value>${basedir}/target/screenshots</value>
              </property>
            </systemProperties>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Generate OSGi Manifest information to all XWiki Core JARs -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <executions>
          <execution>
            <id>bundle-manifest</id>
            <phase>process-classes</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.revapi</groupId>
        <artifactId>revapi-maven-plugin</artifactId>
        <configuration>
          <analysisConfiguration>
            <revapi.filter>
              <archives>
                <!-- We're ignoring all API incompatibilities from XWiki dependencies (i.e. commons and rendering)
                     since they're already covered by their own builds and we release all of them together. -->
                <exclude>
                  <item>org\.xwiki\.commons:.*:.*</item>
                  <item>org\.xwiki\.rendering:.*:.*</item>
                </exclude>
              </archives>
            </revapi.filter>
            <!-- Add ignores here using the following syntax. You can use a single <revapi.ignore> entry but it
                 cannot be empty.

                 Note: you can use regexes by using the syntax: <regex>true</regex>
                 Don't forget to '\'-escape dots and other special characters in this case ;) -->
            <revapi.ignore>
              <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>
                <new>method long org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>
                <justification>Unstable API: not breaking.</justification>
              </item>
              <item>
                <code>java.method.addedToInterface</code>
                <new>method java.util.List&lt;org.xwiki.user.UserReference&gt; org.xwiki.like.LikeManager::getLikers(org.xwiki.model.reference.EntityReference, int, int) throws org.xwiki.like.LikeException</new>
                <justification>Unstable API: not breaking.</justification>
              </item>
                <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference) throws org.xwiki.like.LikeException</old>
                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference, int, int) throws org.xwiki.like.LikeException</new>
                <justification>Unstable API: not breaking.</justification>
              </item>
                <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>
                <new>method long org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>
                <justification>Unstable API: not breaking.</justification>
              </item>
                <item>
                <code>java.class.removed</code>
                <old>interface org.xwiki.like.LikedEntity</old>
                <justification>Unstable API: not breaking.</justification>
              </item>
                <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference)</old>
                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference, int, int)</new>
                <justification>Unstable API: not breaking.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.AbstractRatingEvent</old>
                <justification>Redesign of Ratings API: this class has actually been moved to org.xwiki.ratings.events.AbstractRatingEvent but deeply changed internally.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.addedToInterface</code>
                <new>method .+ org.xwiki.ratings.AverageRating::.+</new>
                <justification>Redesign of Ratings API: Several new methods have been added to AverageRating class.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method void org.xwiki.ratings.AverageRating::save() throws org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: This method has been removed since it should be handled by a dedicated manager and not there.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method void org.xwiki.ratings.AverageRating::set.+</old>
                <justification>Redesign of Ratings API: this interface now only provide getters.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.String org.xwiki.ratings.AverageRating::getMethod()</old>
                <justification>Redesign of Ratings API: this method is no longer needed with the new architecture.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.AverageRatingApi</old>
                <justification>Redesign of Ratings API: only the AverageRating interface should now be used.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>interface org.xwiki.ratings.ConfiguredProvider&lt;T&gt;</old>
                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.ConfiguredRatingsManagerProvider</old>
                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.ConfiguredReputationAlgorithmProvider</old>
                <justification>Redesign of Ratings API: the reputation is no longer supported by this extension.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.String org.xwiki.ratings.Rating::display(java.lang.String, java.lang.String)</old>
                <justification>Redesign of Ratings API: this method is not directly related to rating.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.Object org.xwiki.ratings.Rating::get(java.lang.String)</old>
                <justification>Redesign of Ratings API: this method was too generic for this API.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method com.xpn.xwiki.objects.BaseObject org.xwiki.ratings.Rating::getAsObject() throws org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: this method implied that Rating were always stored as xobject which is not always true.</justification>
              </item>
              <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getAuthor()</old>
                <new>method org.xwiki.user.UserReference org.xwiki.ratings.Rating::getAuthor()</new>
                <justification>Redesign of Ratings API: Following our new User API practice, a user is represented by a UserReference.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.addedToInterface</code>
                <new>method .+ org.xwiki.ratings.Rating::.+</new>
                <justification>Redesign of Ratings API: Rating interface expose now new data that are available through the interface.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.util.Date org.xwiki.ratings.Rating::getDate()</old>
                <justification>Redesign of Ratings API: two dates are now available, the creation date and the last update date.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getDocumentReference()</old>
                <justification>Redesign of Ratings API: Rating is now not only for documents but for any entity. See Rating#getReference().</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.String org.xwiki.ratings.Rating::getGlobalRatingId()</old>
                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.String org.xwiki.ratings.Rating::getRatingId()</old>
                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method boolean org.xwiki.ratings.Rating::remove() throws org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method void org.xwiki.ratings.Rating::save() throws org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method void org.xwiki.ratings.Rating::set.+</old>
                <justification>Redesign of Ratings API: Only getters are now available in this interface.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.addedToInterface</code>
                <new>method .+ org.xwiki.ratings.RatingsConfiguration::.+</new>
                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method com.xpn.xwiki.doc.XWikiDocument org.xwiki.ratings.RatingsConfiguration::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>
                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.lang.String org.xwiki.ratings.RatingsConfiguration::getConfigurationParameter(org.xwiki.model.reference.DocumentReference, java.lang.String, java.lang.String)</old>
                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.field.removedWithConstant</code>
                <old>field .+ @ org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.field.removedWithConstant</code>
                <old>field org.xwiki.ratings.RatingsException.[A-Z_]+</old>
                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>
              </item>
              <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method void org.xwiki.ratings.RatingsException::&lt;init&gt;()</old>
                <new>method void org.xwiki.ratings.RatingsException::&lt;init&gt;(java.lang.String)</new>
                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method .+ org.xwiki.ratings.RatingsException::.+</old>
                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method .+ com.xpn.xwiki.XWikiException::.+ @ org.xwiki.ratings.RatingsException</old>
                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>
              </item>
              <item>
                <code>java.class.noLongerInheritsFromClass</code>
                <old>class org.xwiki.ratings.RatingsException</old>
                <new>class org.xwiki.ratings.RatingsException</new>
                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.field.removedWithConstant</code>
                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>
                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.field.removed</code>
                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>
                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.addedToInterface</code>
                <new>method .+ org.xwiki.ratings.RatingsManager::.+</new>
                <justification>Redesign of Ratings API: some new methods have been added because of new needs.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.DocumentReference===) throws org.xwiki.ratings.RatingsException</old>
                <new>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) throws org.xwiki.ratings.RatingsException</new>
                <justification>Redesign of Ratings API: ratings now apply on entities not just documents.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method .+ org.xwiki.ratings.RatingsManager::.+</old>
                <justification>Redesign of Ratings API: the API of RatingsManager have been greatly simplified.</justification>
              </item>
              <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean) throws org.xwiki.ratings.RatingsException</old>
                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(java.util.Map&lt;org.xwiki.ratings.RatingsManager.RatingQueryField, java.lang.Object&gt;, int, int, org.xwiki.ratings.RatingsManager.RatingQueryField, boolean) throws org.xwiki.ratings.RatingsException</new>
                <justification>Redesign of Ratings API: the method to retrieve ratings in RatingsManager have been made more generic.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===org.xwiki.ratings.Rating===) throws org.xwiki.ratings.RatingsException</old>
                <new>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===java.lang.String===) throws org.xwiki.ratings.RatingsException</new>
                <justification>Redesign of Ratings API: the method to remove a rating in RatingsManager now only take an identifier.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>interface org.xwiki.ratings.ReputationAlgorithm</old>
                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>interface org.xwiki.ratings.ReputationAlgorithmGroovy</old>
                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.ReputationException</old>
                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.UpdateRatingEvent</old>
                <justification>Redesign of Ratings API: this class has been refactored, an equivalent is now in org.xwiki.ratings.events.UpdatedRatingEvent.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.UpdateRatingFailedEvent</old>
                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.UpdatingRatingEvent</old>
                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.ratings.script.RatingApi</old>
                <justification>Redesign of Ratings API: only the Rating interface should now be used.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getUserReputation.*</old>
                <justification>Redesign of Ratings API: User reputation is not supported anymore.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>
                <justification>Redesign of Ratings API: this method was already deprecated.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document, java.lang.String)</old>
                <justification>Redesign of Ratings API: this method was already deprecated.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method com.xpn.xwiki.api.Document org.xwiki.ratings.script.RatingsScriptService::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>
                <justification>Redesign of Ratings API: this method does not make sense in the new design.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(===com.xpn.xwiki.api.Document===)</old>
                <new>parameter java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference).</justification>
              </item>
              <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document)</old>
                <new>method java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(org.xwiki.model.reference.EntityReference) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>
              </item>
              <item>
                <regex>true</regex>
                <code>java.method.removed</code>
                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating.*</old>
                <justification>Redesign of Ratings API: clean up of deprecated methods or methods that are not relevant on the new design.</justification>
              </item>
              <item>
                <code>java.class.nonFinalClassInheritsFromNewClass</code>
                <old>class org.xwiki.ratings.script.RatingsScriptService</old>
                <new>class org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: this change shouldn't impact using the script service.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(===com.xpn.xwiki.api.Document===, java.lang.String)</old>
                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference)</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, ===java.lang.String===)</old>
                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>
              </item>
                <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>
                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference)</old>
                <justification>Redesign of Ratings API: the changes above actually apply to that one.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(===com.xpn.xwiki.api.Document===, int, int)</old>
                <new>parameter java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(===org.xwiki.model.reference.EntityReference===, int, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: allow to retrieve rating for any reference (not only DocumentReference)</justification>
              </item>
              <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int)</old>
                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(org.xwiki.model.reference.EntityReference, int, int, boolean) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: actually the method with this number of parameter existed (see below)</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean)</old>
                <justification>Redesign of Ratings API: this method was actually not removed but we used an EntityReference instead of Document API. See above.</justification>
              </item>
              <item>
                <code>java.method.removed</code>
                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(com.xpn.xwiki.api.Document, int, int, boolean)</old>
                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter.</justification>
              </item>
              <item>
                <code>java.method.numberOfParametersChanged</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>
                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter. A new API has been introduced and revapi considers it replaces it.</justification>
              </item>
              <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>
                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(===org.xwiki.model.reference.DocumentReference===, org.xwiki.model.reference.DocumentReference, int)</old>
                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: allow to set rating for any reference (not only DocumentReference)</justification>
              </item>
              <item>
                <code>java.method.parameterTypeChanged</code>
                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, ===org.xwiki.model.reference.DocumentReference===, int)</old>
                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>
              </item>
              <item>
                <code>java.method.returnTypeChanged</code>
                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference, int)</old>
                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>
                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>
              </item>
              <item>
                <code>java.method.addedToInterface</code>
                <new>method long org.xwiki.like.LikeManager::countUserLikes(org.xwiki.user.UserReference) throws org.xwiki.like.LikeException</new>
                <justification>Unstable API.</justification>
              </item>
              <item>
                <code>java.method.addedToInterface</code>
                <new>method void org.xwiki.like.LikeManager::clearCache()</new>
                <justification>Unstable API.</justification>
              </item>
              <item>
                <code>java.method.addedToInterface</code>
                <new>method void org.xwiki.like.LikeManager::clearCache(org.xwiki.model.reference.EntityReference)</new>
                <justification>Unstable API.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.like.LikeEvent</old>
                <justification>Unstable API: it has been moved in package org.xwiki.like.events.</justification>
              </item>
              <item>
                <code>java.class.removed</code>
                <old>class org.xwiki.like.UnlikeEvent</old>
                <justification>Unstable API: it has been moved in package org.xwiki.like.events.</justification>
              </item>
            </revapi.ignore>
          </analysisConfiguration>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <modules>
      <!-- Sorted Alphabetically -->
    <module>xwiki-platform-activeinstalls</module>
    <module>xwiki-platform-administration</module>
    <module>xwiki-platform-alerts</module>
    <module>xwiki-platform-annotation</module>
    <module>xwiki-platform-application</module>
    <module>xwiki-platform-appwithinminutes</module>
    <module>xwiki-platform-attachment</module>
    <module>xwiki-platform-autotag</module>
    <module>xwiki-platform-bridge</module>
    <module>xwiki-platform-captcha</module>
    <module>xwiki-platform-chart</module>
    <module>xwiki-platform-classloader</module>
    <module>xwiki-platform-component</module>
    <module>xwiki-platform-configuration</module>
    <module>xwiki-platform-container</module>
    <module>xwiki-platform-crypto</module>
    <module>xwiki-platform-csrf</module>
    <module>xwiki-platform-dashboard</module>
    <module>xwiki-platform-date</module>
    <module>xwiki-platform-diff</module>
    <module>xwiki-platform-diffplugin</module>
    <module>xwiki-platform-display</module>
    <module>xwiki-platform-edit</module>
    <module>xwiki-platform-eventstream</module>
    <module>xwiki-platform-extension</module>
    <module>xwiki-platform-feed</module>
    <module>xwiki-platform-filter</module>
    <module>xwiki-platform-flamingo</module>
    <module>xwiki-platform-flavor</module>
    <module>xwiki-platform-formula</module>
    <module>xwiki-platform-graphviz</module>
    <module>xwiki-platform-groovy</module>
    <module>xwiki-platform-help</module>
    <module>xwiki-platform-icon</module>
    <module>xwiki-platform-image</module>
    <module>xwiki-platform-index</module>
    <module>xwiki-platform-instance</module>
    <module>xwiki-platform-invitation</module>
    <module>xwiki-platform-job</module>
    <module>xwiki-platform-jodatime</module>
    <module>xwiki-platform-lesscss</module>
    <module>xwiki-platform-like</module>
    <module>xwiki-platform-linkchecker</module>
    <module>xwiki-platform-livetable</module>
    <module>xwiki-platform-localization</module>
    <module>xwiki-platform-logging</module>
    <module>xwiki-platform-mail</module>
    <module>xwiki-platform-mailsender</module>
    <module>xwiki-platform-mentions</module>
    <module>xwiki-platform-menu</module>
    <module>xwiki-platform-messagestream</module>
    <module>xwiki-platform-minimaldependencies</module>
    <module>xwiki-platform-model</module>
    <module>xwiki-platform-notifications</module>
    <module>xwiki-platform-observation</module>
    <module>xwiki-platform-office</module>
    <module>xwiki-platform-oldcore</module>
    <module>xwiki-platform-panels</module>
    <module>xwiki-platform-query</module>
    <module>xwiki-platform-ratings</module>
    <module>xwiki-platform-refactoring</module>
    <module>xwiki-platform-release</module>
    <module>xwiki-platform-rendering</module>
    <module>xwiki-platform-repository</module>
    <module>xwiki-platform-resource</module>
    <module>xwiki-platform-rest</module>
    <module>xwiki-platform-sandbox</module>
    <module>xwiki-platform-sharepage</module>
    <module>xwiki-platform-scheduler</module>
    <module>xwiki-platform-search</module>
    <module>xwiki-platform-security</module>
    <module>xwiki-platform-sheet</module>
    <module>xwiki-platform-skin</module>
    <module>xwiki-platform-statistics</module>
    <module>xwiki-platform-store</module>
    <module>xwiki-platform-svg</module>
    <module>xwiki-platform-tag</module>
    <module>xwiki-platform-template</module>
    <module>xwiki-platform-test</module>
    <module>xwiki-platform-tika</module>
    <module>xwiki-platform-tree</module>
    <module>xwiki-platform-user</module>
    <module>xwiki-platform-uiextension</module>
    <module>xwiki-platform-url</module>
    <module>xwiki-platform-velocity</module>
    <module>xwiki-platform-vfs</module>
    <module>xwiki-platform-web</module>
    <module>xwiki-platform-webjars</module>
    <module>xwiki-platform-wiki</module>
    <module>xwiki-platform-wysiwyg</module>
    <module>xwiki-platform-xar</module>
    <module>xwiki-platform-xclass</module>
    <module>xwiki-platform-xml</module>
    <module>xwiki-platform-zipexplorer</module>
  </modules>
  <profiles>
    <!-- Profile to build Legacy modules -->
    <profile>
      <id>legacy</id>
      <modules>
        <module>xwiki-platform-legacy</module>
      </modules>
    </profile>
    <profile>
      <id>docker</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-failsafe-plugin</artifactId>
              <configuration>
                <systemProperties combine.children="append">
                  <!-- This is required by the Oracle JDBC driver when running configuration tests on Oracle, as
                       otherwise it fails with:
                         SQLException: ORA-00604: error occurred at recursive SQL level 1
                         ORA-01882: timezone region not found
                       It's required at this level since TestContainers used JDBC to verify that the Oracle database is
                       started.
                  -->
                  <property>
                    <name>oracle.jdbc.timezoneAsRegion</name>
                    <value>false</value>
                  </property>
                </systemProperties>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
  </profiles>
</project>
